// <auto-generated />
using System;
using AnalysisNeuralNetwork.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AnalysisNeuralNetwork.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnalysisNeuralNetwork.Data.DetectedObject", b =>
                {
                    b.Property<int>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ObjectId"));

                    b.Property<string>("ClassName")
                        .HasColumnType("text");

                    b.Property<string>("Contractor")
                        .HasColumnType("text");

                    b.Property<int>("CriticalLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTimeDetection")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("RoadCategory")
                        .HasColumnType("text");

                    b.Property<string>("RoadClass")
                        .HasColumnType("text");

                    b.Property<string>("SectionOfRoad")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("VideoName")
                        .HasColumnType("text");

                    b.HasKey("ObjectId");

                    b.ToTable("DetectedObjects");
                });

            modelBuilder.Entity("AnalysisNeuralNetwork.Data.SummaryData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contractor")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoadCategory")
                        .HasColumnType("text");

                    b.Property<string>("RoadClass")
                        .HasColumnType("text");

                    b.Property<string>("RoadName")
                        .HasColumnType("text");

                    b.Property<string>("SectionOfRoad")
                        .HasColumnType("text");

                    b.Property<string>("VideoName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SummaryData");
                });
#pragma warning restore 612, 618
        }
    }
}
